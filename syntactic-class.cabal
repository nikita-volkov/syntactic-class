cabal-version: 3.0
name: syntactic-class
version: 0
category: Text, Builders, Formatting, Parsing, Syntax
synopsis: Lawful typeclass for canonical formatting and parsing
description:
  Many types have a canonical textual notation. E.g., UUID, email address, URL, IP. Having such a notation implies being able to render such values to text and parsing from it. This library provides a lawful typeclass for such types.

  There also are types which have multiple textual notations. E.g., a date can be represented in the ISO8601 format or in the RFC1123 format. Such types are also supported by this library with the help of newtype wrappers such as `InIso8601`.

  In the Haskell community there exists a common practice of using `Read` and `Show` typeclasses for similar purposes, however, it is flawed. These typeclasses are not lawful and they promote representing values as Haskell expressions instead of domain-specific notations which people often expect from them. This leads to a mess surrounding the conventions around these classes with a notable example of the "time" library supplying instances which don't operate on Haskell expressions. Consider this library as a solution to this problem.

  The typeclass operates on composable builders and parsers making the instances reusable in a wide range of situations.

homepage: https://github.com/nikita-volkov/syntactic-class
bug-reports: https://github.com/nikita-volkov/syntactic-class/issues
author: Nikita Volkov <nikita.y.volkov@mail.ru>
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
copyright: (c) 2025, Nikita Volkov
license: MIT
license-file: LICENSE
extra-doc-files:
  CHANGELOG.md
  LICENSE
  README.md

source-repository head
  type: git
  location: https://github.com/nikita-volkov/syntactic-class

common base
  default-language: Haskell2010
  default-extensions:
    BangPatterns
    BlockArguments
    ConstraintKinds
    DataKinds
    DefaultSignatures
    DeriveDataTypeable
    DeriveFoldable
    DeriveFunctor
    DeriveGeneric
    DeriveTraversable
    DerivingStrategies
    EmptyDataDecls
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GADTs
    GeneralizedNewtypeDeriving
    LambdaCase
    LiberalTypeSynonyms
    MagicHash
    MultiParamTypeClasses
    MultiWayIf
    NoImplicitPrelude
    NoMonomorphismRestriction
    NumericUnderscores
    OverloadedStrings
    ParallelListComp
    PatternGuards
    QuasiQuotes
    RankNTypes
    RecordWildCards
    ScopedTypeVariables
    StandaloneDeriving
    StrictData
    TemplateHaskell
    TupleSections
    TypeApplications
    TypeFamilies
    TypeOperators
    UnboxedTuples
    ViewPatterns

common executable
  import: base
  ghc-options:
    -O2
    -threaded
    -with-rtsopts=-N
    -rtsopts
    -funbox-strict-fields

common test
  import: base
  ghc-options:
    -threaded
    -with-rtsopts=-N

library
  import: base
  hs-source-dirs: src/library
  exposed-modules: SyntacticClass
  other-modules:
    SyntacticClass.Class
    SyntacticClass.Instances.InIso8601
    SyntacticClass.Instances.InIso8601.Builders
    SyntacticClass.Instances.Uuid
    SyntacticClass.Prelude

  build-depends:
    QuickCheck >=2.14 && <3,
    attoparsec >=0.14 && <0.15,
    attoparsec-data ^>=1.0.5.4,
    base >=4.11 && <5,
    bytestring >=0.10 && <0.13,
    text >=1.0 && <3,
    text-builder ^>=1,
    time >=1.12 && <2,
    transformers >=0.5 && <0.7,
    uuid >=1.3 && <2,

test-suite test
  import: test
  type: exitcode-stdio-1.0
  hs-source-dirs: src/test
  main-is: Main.hs
  other-modules:
  build-tool-depends:
    hspec-discover:hspec-discover >=2 && <3

  build-depends:
    QuickCheck >=2.14 && <3,
    hspec >=2.11 && <3,
    quickcheck-instances >=0.3.28 && <0.4,
    rerebase >=1.21.2 && <2,
    syntactic-class,
